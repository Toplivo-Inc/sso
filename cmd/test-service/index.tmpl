{{ define "cmd/test-service-provider/index.tmpl" }}
<html>
	<head>
		<title>Service provider</title>
		<style>
			body {
				word-wrap: break-word;
			}
			a.login {
				border: black solid 1px;
				border-radius: 10px;
				background: #55aaee;
				color: white;
				padding: 10px;
			}
		</style>
	</head>
	<body>
		<h1>Example service provider</h1>
		<p>Clicking on login redirects to /login page.</p>
		<p>It is a Go handler because of my JS skill issue, but it isn't necessary. Login button could redirect to sso/oauth/authorize right away, although if you use state and code challenge, you need to store them somewhere.</p>
		<p>If TOPLIVO_SESSION_TOKEN is present, sso/oauth/authorize redirects to callback which requests access token from sso/oauth/token. Token is sent in response body, and callback is storing it in cookies as TOPLIVO_ACCESS_TOKEN.</p> 
		<p>If TOPLIVO_SESSION_TOKEN is not present, sso/oauth/authorize redirects to sso login page. If login is successful, it sets the session token and then goes back to sso/oauth/authorize.</p> 
		
		<a class="login" href="/login">Login</a>

		<div>
			<p id="token_field"></p>
			<p>Go to <a href="https://www.jwt.io/" target=_blank>jwt.io</a> to see claims</p> 
		</div>

		<script>
			let tokenField = document.getElementById("token_field");
			let accessToken = getCookie("TOPLIVO_ACCESS_TOKEN");

			if (accessToken != undefined) {
				tokenField.innerHTML = "Access token: " + accessToken;
			} else {
				tokenField.innerHTML = "No access token";
			}

			function getCookie(name) {
			  const value = `; ${document.cookie}`;
			  const parts = value.split(`; ${name}=`);
			  if (parts.length === 2) return parts.pop().split(';').shift();
			}
		</script>
	</body>
</html>
{{ end }}
